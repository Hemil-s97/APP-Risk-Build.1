package view;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Random;
import java.util.Set;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

import org.apache.commons.lang3.StringUtils;

import controller.MapEdit;
import exception.InvalidMapException;
import model.Continent;
import model.RiskPlayers;
import model.Territories;


/**
 * This Class used to display Panel of Edit Map
 * This class is also used to edit .Map file selected by user
 * @author Nikunj Arora
 *
 */
public class NewEMPanel implements ActionListener{

    private JRadioButton mapOptionA;
    private JLabel fetchFileDataError;
    private GridBagConstraints con;
    private String backButnName = "backButn";
    String existingMapFilePath;
    boolean randomMap;

    private JTextField addContinentField;
    private JTextField addContinentValField;
    private JTextField addTerritoryField;
    private JTextField editContinentField;
    private JTextField editContinentValue;
    private JTextField editTerritoryField;

    private JButton backButn;
    private JButton saveMapButn;
    private JButton addContinentButn;
    private JButton addTerritoryButn;
    private JButton deleteTerritoryButn;
    private JButton deleteAdjTerrButn;
    private JButton addAdjTerritoryButn;
    private JButton editContinentButn;
    private JButton editTerritoryButn;
    private JButton deleteContinentButn;
    private Territories territory;
    private Continent continent;
    private boolean validFlag;
    JFrame frame;
    boolean editMapFileFlag;
    boolean isMapSelected = false;

    private JComboBox<String> editContinentList;
    private JComboBox<String> editTerritoryList;
    private JComboBox<String> allContinentList;
    private JComboBox<String> allTerritoryList;
    private JComboBox<String> allAdjTerritoryList;
    private JComboBox<String> addTerrContinentList;
    private JComboBox<String> deleteContinentList;
    private JComboBox<String> deleteTerritoryList;
    private JComboBox<String> deleteAdjTerrtList;
    private JComboBox<String> addAdjTerritoryListA;
    private JComboBox<String> addAdjTerritoryListB;
    
    /**
     * This is a method UI of New and  Edit Existing Map
     * @param frame Current Frame
     * @param editMapFileFlag Used too identify whether player want to create new map or edit existing map
     * @return JPanel which is added in current frame
     */
    public JPanel createMapPanel(JFrame frame,boolean editMapFileFlag){
	this.frame = frame;
	this.editMapFileFlag = editMapFileFlag;
	if(!editMapFileFlag) {
	    territory = new Territories();
	    continent = new Continent();
	}
	JPanel exstngMapPanl = new JPanel();
	GridBagLayout exisitngMapLayout = new GridBagLayout();
	exstngMapPanl.setLayout(exisitngMapLayout);
	exstngMapPanl.setSize(new Dimension(400,250));
	mapOptionA = new JRadioButton("Choose Your Own Map");
	mapOptionA.setActionCommand("Own Map");
	JFileChooser chooseMap = new JFileChooser("D:");
	FileNameExtensionFilter filter = new FileNameExtensionFilter("MAP FILES", "map", "map");
	chooseMap.setFileFilter(filter);
	chooseMap.addChoosableFileFilter(new FileFilter() {
	    public String getDescription() {
		return "MAP Documents (*.map)";
	    }
	    public boolean accept(File f) {
		if (f.isDirectory()) {
		    return true;
		} else {
		    return f.getName().toLowerCase().endsWith(".map");
		}
	    }
	});
	mapOptionA.addItemListener(new ItemListener() {

	    @Override
	    public void itemStateChanged(ItemEvent e) {
		// TODO Auto-generated method stub
		if(mapOptionA.isSelected() && chooseMap.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
		    existingMapFilePath = chooseMap.getSelectedFile().getPath();
		    genEMData(existingMapFilePath);
		    randomMap = false;
		    isMapSelected = true;
		}
	    }
	});
	fetchFileDataError = new JLabel("There is problem with file");
	if(!editMapFileFlag) {
	    mapOptionA.setVisible(false);
	    fetchFileDataError.setVisible(false);
	    chooseMap.setVisible(false);
	}
	allContinentList = new JComboBox<>();
	allContinentList.setActionCommand("allContinentList");
	allContinentList.addActionListener(this);
	allTerritoryList = new JComboBox<>();
	allTerritoryList.setActionCommand("allTerritoryList");
	allTerritoryList.addActionListener(this);
	allAdjTerritoryList = new JComboBox<>();

	addContinentField = new JTextField();
	addContinentValField = new JTextField();
	addContinentButn = new JButton("Add Continent");
	addContinentButn.setActionCommand("Add Continent");
	addContinentButn.addActionListener(this);

	addTerrContinentList = new JComboBox<>();
	addTerritoryField = new JTextField();
	addTerritoryButn = new JButton("Add Terrritory");
	addTerritoryButn.setActionCommand("Add Territory");
	addTerritoryButn.addActionListener(this);

	addAdjTerritoryListA = new JComboBox<>();
	addAdjTerritoryListB = new JComboBox<>();
	addAdjTerritoryButn = new JButton("Add Adjacent");
	addAdjTerritoryButn.setActionCommand("Add Adjacent");
	addAdjTerritoryButn.addActionListener(this);

	editContinentList = new JComboBox<>();
	editContinentList.setActionCommand("editContinentList");
	editContinentList.addActionListener(this);
	editContinentField = new JTextField();
	editContinentValue = new JTextField();
	editContinentButn = new JButton("Update Continent");
	editContinentButn.setActionCommand("Update Continent");
	editContinentButn.addActionListener(this);
	editTerritoryList = new JComboBox<>();
	editTerritoryList.setActionCommand("editTerritoryList");
	editTerritoryList.addActionListener(this);
	editTerritoryField = new JTextField();
	editTerritoryButn = new JButton("Update Territory");
	editTerritoryButn.setActionCommand("Update Territory");
	editTerritoryButn.addActionListener(this);


	deleteContinentList = new JComboBox<>();
	deleteContinentList.setActionCommand("deleteContinentList");
	deleteContinentList.addActionListener(this);
	deleteTerritoryList = new JComboBox<>();
	deleteTerritoryList.setActionCommand("deleteTerritoryList");
	deleteTerritoryList.addActionListener(this);
	deleteAdjTerrtList = new JComboBox<>();
	deleteContinentButn = new JButton("Delete Continent");
	deleteTerritoryButn = new JButton("Delete Territory");
	deleteAdjTerrButn = new JButton("Delete Adjacent");


	deleteContinentButn.setActionCommand("Delete Continent");
	deleteContinentButn.addActionListener(this);
	deleteTerritoryButn.setActionCommand("Delete Territory");
	deleteTerritoryButn.addActionListener(this);
	deleteAdjTerrButn.setActionCommand("Delete Adjacent");
	deleteAdjTerrButn.addActionListener(this);
	if(editMapFileFlag) {
	    saveMapButn = new JButton("Update Map Data");
	    saveMapButn.addActionListener(this);
	    saveMapButn.setActionCommand("Update Map Data");    
	} else {
	    saveMapButn = new JButton("Create Map");
	    saveMapButn.addActionListener(this);
	    saveMapButn.setActionCommand("Create Map Data");    
	}

	backButn = new JButton("Exit");
	backButn.addActionListener(this);
	backButn.setActionCommand(backButnName);

	exstngMapPanl.add(new JLabel("Add Continent"), setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 0, 3));
	exstngMapPanl.add(new JLabel("Continent Name"), setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.CENTER, 0.5, 0.5, 0, 4));
	exstngMapPanl.add(addContinentField, setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 1, 4));
	exstngMapPanl.add(new JLabel("Value"), setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.CENTER, 0.5, 0.5, 2, 4));
	exstngMapPanl.add(addContinentValField, setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 3, 4));
	exstngMapPanl.add(addContinentButn, setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 4, 4));

	exstngMapPanl.add(mapOptionA, setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 0, 0));
	exstngMapPanl.add(fetchFileDataError, setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 1, 0));
	exstngMapPanl.add(new JLabel("List of Continent"), setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 0, 1));
	exstngMapPanl.add(new JLabel("All territory"), setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 1, 1));
	exstngMapPanl.add(new JLabel("Adjacent Territory"), setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 2, 1));
	exstngMapPanl.add(allContinentList, setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 0, 2));		        	
	exstngMapPanl.add(allTerritoryList, setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 1, 2));		
	exstngMapPanl.add(allAdjTerritoryList, setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 2, 2));		

	exstngMapPanl.add(new JLabel("Add Adjacent"), setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 0, 7));
	exstngMapPanl.add(new JLabel("Territory"), setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.CENTER, 0.5, 0.5, 0, 8));
	exstngMapPanl.add(addAdjTerritoryListA, setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 1, 8));
	exstngMapPanl.add(new JLabel("and It's Adjacent Territory"), setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.CENTER, 0.5, 0.5, 2, 8));
	exstngMapPanl.add(addAdjTerritoryListB, setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 3, 8));
	exstngMapPanl.add(addAdjTerritoryButn, setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 4, 8));

	exstngMapPanl.add(new JLabel("Edit Continent"), setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.BOTH, 0.5, 0.5, 0, 9));
	exstngMapPanl.add(editContinentList, setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 0, 10));
	exstngMapPanl.add(editContinentField, setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 1, 10));
	exstngMapPanl.add(editContinentValue, setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 2, 10));
	exstngMapPanl.add(editContinentButn, setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 3, 10));

	exstngMapPanl.add(new JLabel("Add Territory"), setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 0, 5));
	exstngMapPanl.add(new JLabel("Continent List"), setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.CENTER, 0.5, 0.5, 0, 6));
	exstngMapPanl.add(addTerrContinentList, setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 1, 6));
	exstngMapPanl.add(new JLabel("Territory Name"), setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.CENTER, 0.5, 0.5, 2, 6));
	exstngMapPanl.add(addTerritoryField, setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 3, 6));
	exstngMapPanl.add(addTerritoryButn, setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 4, 6));
	
	exstngMapPanl.add(new JLabel("List of Continent"), setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.CENTER, 0.5, 0.5, 0, 11));
	exstngMapPanl.add(new JLabel("All territory"), setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.BOTH, 0.5, 0.5, 2, 11));
	exstngMapPanl.add(new JLabel("Adjacent Territory"), setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.BOTH, 0.5, 0.5, 4, 11));
	exstngMapPanl.add(deleteContinentList, setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 0, 12));
	exstngMapPanl.add(deleteContinentButn, setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.CENTER, 0.5, 0.5, 1, 12));
	exstngMapPanl.add(deleteTerritoryList, setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 2, 12));
	exstngMapPanl.add(deleteTerritoryButn, setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.CENTER, 0.5, 0.5, 3, 12));		
	exstngMapPanl.add(deleteAdjTerrtList, setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 4, 12));
	exstngMapPanl.add(deleteAdjTerrButn, setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.CENTER, 0.5, 0.5, 5, 12));
	exstngMapPanl.add(saveMapButn, setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.CENTER, 0.5, 0.5, 2, 13));
	exstngMapPanl.add(backButn, setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.CENTER, 0.5, 0.5, 3, 13));

	exstngMapPanl.add(new JLabel("Edit Territory"), setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.BOTH, 0.5, 0.5, 4, 9));
	exstngMapPanl.add(editTerritoryList, setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 4, 10));
	exstngMapPanl.add(editTerritoryField, setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 5, 10));        	
	exstngMapPanl.add(editTerritoryButn, setGridBagConstraints(new Insets(5, 5, 5, 5), GridBagConstraints.HORIZONTAL, 0.5, 0.5, 6, 10));
	
	return exstngMapPanl;
    }
    /**
     * This method is used to generate map data which is selected for editing
     * @param filePath path of input file use for editing
     */
    protected void genEMData(String filePath) {
	if(StringUtils.isNotEmpty(filePath)) {
	    MapEdit editMapFile = new MapEdit(filePath); 
	    if(editMapFile.dataGeneration()) {
		fetchFileDataError.setText("File Content Data is validated and Ready to Edit");
		territory = editMapFile.getTerritory();
		continent = editMapFile.getContinent();

		updateAllContinentList();
		updAddTerrContinentLst();
		updEditContinentLst();
		updAddAdjTerritoryLst();
		updEditTerritoryLst();
		updDelContinentLst();
	    }
	}
    }	

    /**
     * The GridBagConstraints is used specifies constraints for components that are laid out using the GridBagLayout class.
     * Initialize GridBagConstraint object with all of its fields set to their default value.
     * @param insets The initial insets value.
     * @param fill The initial fill value.
     * @param wx The initial weightx value.
     * @param wy The initial weighty value.
     * @param x The initial gridx value.
     * @param y The initial gridy value.
     * @return GridBagConstraints object with all of its fields set to the passed-in arguments
     */
    public GridBagConstraints setGridBagConstraints(Insets insets,int fill, double wx, double wy, int x, int y) {
	con = new GridBagConstraints();
	con.fill = fill;
	con.insets = insets;
	con.weightx = wx;
	con.weighty = wy;
	con.gridx = x;
	con.gridy = y;
	return con;
    }
    @Override
    public void actionPerformed(ActionEvent arg0) {
	// TODO Auto-generated method stub
	String actionName = arg0.getActionCommand();
	System.out.println("Action Name " + actionName);
	if(actionName.equalsIgnoreCase(backButnName)){
	    Panels gamePanels = new Panels();
	    frame.setContentPane(gamePanels.mainMenu(frame, new RiskPlayers()));
	    frame.invalidate();
	    frame.validate();
	} else if(actionName.equalsIgnoreCase("Add Continent")){
	    addContinent(addContinentField.getText(),addContinentValField.getText());
	} else if(actionName.equalsIgnoreCase("Add Territory")){
	    addTerritory(addTerrContinentList.getItemAt(addTerrContinentList.getSelectedIndex()),addTerritoryField.getText());
	} else if(actionName.equalsIgnoreCase("Add Adjacent")){
	    addAdjTerritory(addAdjTerritoryListA.getItemAt(addAdjTerritoryListA.getSelectedIndex()),addAdjTerritoryListB.getItemAt(addAdjTerritoryListB.getSelectedIndex()));
	} else if(actionName.equalsIgnoreCase("Update Continent")){
	    updateContinent(editContinentList.getItemAt(editContinentList.getSelectedIndex()),editContinentField.getText(),editContinentValue.getText());		 		    
	} else if(actionName.equalsIgnoreCase("Update Territory")){
	    updateTerritory(editTerritoryList.getItemAt(editTerritoryList.getSelectedIndex()),editTerritoryField.getText());
	} else if(actionName.equalsIgnoreCase("Delete Continent")){
	    deleteContinent(deleteContinentList.getItemAt(deleteContinentList.getSelectedIndex()));
	} else if(actionName.equalsIgnoreCase("Delete Territory")){
	    deleteTerritory(deleteTerritoryList.getItemAt(deleteAdjTerrtList.getSelectedIndex()));
	} else if(actionName.equalsIgnoreCase("Delete Adjacent")){
	    delAdjTerritory(deleteAdjTerrtList.getItemAt(deleteAdjTerrtList.getSelectedIndex()));
	} else if(actionName.equalsIgnoreCase("Update Map Data")){
	    MapEdit editMapFile = new MapEdit("previous.map");
	    try {
		if(isMapSelected) {
		    validFlag = editMapFile.saveEditedMap(territory, continent);
		    if(validFlag) {
			displaySuccessDialog();
		    }
		} else {
		    JOptionPane.showMessageDialog(null, "Please Select for Editing");
		}

	    } catch (InvalidMapException e) {
		e.printStackTrace();
	    }
	}  else if(actionName.equalsIgnoreCase("Create Map Data")) {
	    Random random = new Random();
	    String tempFileName = "mapFile"+ random.nextInt(1000)+".map";
	    MapEdit editMapFile = new MapEdit(tempFileName);
	    try {
		validFlag = editMapFile.saveEditedMap(territory, continent);
		if(validFlag) {
		    JOptionPane.showMessageDialog(null, "File Create with name : "+tempFileName,"Content Validated",JOptionPane.INFORMATION_MESSAGE);			    
		} else {
		    displayErrorDialog();
		}


	    } catch (InvalidMapException e) {
		e.printStackTrace();
	    } 

	} else if(actionName.equalsIgnoreCase("allContinentList")) {
	    updAllTerritoryLst();
	} else if(actionName.equalsIgnoreCase("allTerritoryList")) {
	    updAllAdjTerritoryLst();
	} else if(actionName.equalsIgnoreCase("editContinentList") && editContinentList.getSelectedIndex() != -1) {
	    editContinentField.setText(editContinentList.getItemAt(editContinentList.getSelectedIndex()));
	    editContinentValue.setText(Integer.toString(continent.getValueOfContinent().get(editContinentList.getItemAt(editContinentList.getSelectedIndex()))));
	} else if(actionName.equalsIgnoreCase("editTerritoryList") && editTerritoryList.getSelectedIndex() != -1) {
	    editTerritoryField.setText(editTerritoryList.getItemAt(editTerritoryList.getSelectedIndex()));
	} else if(actionName.equalsIgnoreCase("deleteContinentList")) {
	    generateDelTerritoryLst(deleteContinentList.getItemAt(deleteContinentList.getSelectedIndex()));
	} else if(actionName.equalsIgnoreCase("deleteTerritoryList")) {
	    generateDelAdjTerritoryLst(deleteTerritoryList.getItemAt(deleteTerritoryList.getSelectedIndex()));
	}

    }
    /**
     * The GridBagConstraints is used specifies constraints for components that are laid out using the GridBagLayout class.
     * Initialize GridBagConstraint object with all of its fields set to their default value.
     * @param insets The initial insets value
     * @param fill The initial fill value
     * @param anchor The initial anchor value.
     * @param wx The initial weightx value.
     * @param wy The initial weighty value.
     * @param x The initial gridx value.
     * @param y The initial gridy value.
     * @return GridBagConstraints object with all of its fields set to the passed-in arguments
     */
    public GridBagConstraints setGridBagConstraints(Insets insets,int fill,int anchor, double wx, double wy, int x, int y) {
	con = new GridBagConstraints();
	con.fill = fill;
	con.anchor = anchor;
	con.insets = insets;
	con.weightx = wx;
	con.weighty = wy;
	con.gridx = x;
	con.gridy = y;
	return con;
    }
    /**
     *  This method is used to generate territory drop down of particular continent in Delete Section
     * @param itemAt Current Continent whose territory need to populate
     */
    private void generateDelTerritoryLst(String itemAt) {
	deleteTerritoryList.removeAllItems();
	for(Entry<String, String> entry : territory.getTerritoryOfContinent().entrySet()) {
	    if(entry.getValue().equalsIgnoreCase(itemAt)) {
		deleteTerritoryList.addItem(entry.getKey());
	    }
	}
    }
    /**
     *  This method is used to generate adjacent territory drop down in Delete Section
     * @param itemAt Current Territory whose adjacent territory need to populate
     */
    private void generateDelAdjTerritoryLst(String itemAt) {
	deleteAdjTerrtList.removeAllItems();
	for(Entry<String, ArrayList<String>> entry : territory.getNeighborTerritories().entrySet()) {
	    if(entry.getKey().equalsIgnoreCase(itemAt)) {
		for(int i = 0;i< entry.getValue().size();i++) {
		    deleteAdjTerrtList.addItem(entry.getValue().get(i));
		}
	    }
	}
    }
    /**
     *  This method is used to delete adjacent territory  of particular territory in Delete Section
     * @param adjacent Current adjacent territory which need to delete
     */
    private void delAdjTerritory(String adjacent) {
	System.out.println("Enter adjacent Territory  for delete is "+ adjacent);	    
	if(deleteAdjTerrtList.getSelectedIndex() != -1) {
	    territory.getNeighborTerritories().get(deleteTerritoryList.getItemAt(deleteTerritoryList.getSelectedIndex())).remove(adjacent);
	    displaySuccessDeleteDialog();
	    updateAllContinentList();
	    updAddTerrContinentLst();
	    updEditContinentLst();
	    updAddAdjTerritoryLst();
	    updEditTerritoryLst();
	    updDelContinentLst();
	}
    }
    /**
     *  This method is used to generate territory drop down  in Add Adjacent Section
     */
    private void updAddAdjTerritoryLst() {
	// TODO Auto-generated method stub
	addAdjTerritoryListA.removeAllItems();
	addAdjTerritoryListB.removeAllItems();
	for(Entry<String, String> entry : territory.getTerritoryOfContinent().entrySet()) {
	    addAdjTerritoryListA.addItem(entry.getKey());
	    addAdjTerritoryListB.addItem(entry.getKey());

	}	    
    }
    /**
     *  This method is used to generate territory drop down of particular continent in Display All Detail Section
     */
    private void updAllAdjTerritoryLst() {
	allAdjTerritoryList.removeAllItems();
	try {
	    if(allTerritoryList.getSelectedIndex() != -1 ) {
		for(int i=0;i< territory.getNeighborTerritories().get(allTerritoryList.getItemAt(allTerritoryList.getSelectedIndex())).size();i++){
		    if(StringUtils.isNotEmpty(territory.getNeighborTerritories().get(allTerritoryList.getItemAt(allTerritoryList.getSelectedIndex())).get(i)))
			allAdjTerritoryList.addItem(territory.getNeighborTerritories().get(allTerritoryList.getItemAt(allTerritoryList.getSelectedIndex())).get(i));
		}	
	    }
	}
	catch(Exception e) {
	    System.out.println("No Territories ");
	}


    }
    /**
     * This method is used to delete territory  and it's all adjacent territory of particular continent in Delete Section
     * @param territoryStr Territory which need to delete
     */
    private void deleteTerritory(String territoryStr) {
	System.out.println("Enter  Territory  for delete is "+ territoryStr);
	if(deleteTerritoryList.getSelectedIndex() != -1) {
	    territory.getTerritoryOfContinent().remove(territoryStr);
	    territory.getTotalTerritories().remove(territoryStr);
	    territory.getNeighborTerritories().remove(territoryStr);
	    for(Entry<String, ArrayList<String>> entry : continent.getContinentTerritories().entrySet()) {
		if(entry.getValue().contains(territoryStr))
		    entry.getValue().remove(territoryStr);
	    }
	    for(Entry<String, ArrayList<String>> entry : territory.getNeighborTerritories().entrySet()) {
		ArrayList<String> tempArray = new ArrayList<>();
		for(int i=0;i<entry.getValue().size();i++) {
		    if(!entry.getValue().get(i).equalsIgnoreCase(territoryStr)) {
			tempArray.add(entry.getValue().get(i));
		    }   
		}
		entry.setValue(tempArray);
	    }
	    displaySuccessDeleteDialog();
	    updateAllContinentList();
	    updAddTerrContinentLst();
	    updEditContinentLst();
	    updAddAdjTerritoryLst();
	    updEditTerritoryLst();
	    updDelContinentLst();
	}
    }
    /**
     * This method is used to update  territory name with new name  Edit Territory Section Section
     * @param oldTerritory
     * @param newTerritory
     */
    private void updateTerritory(String oldTerritory, String newTerritory) {
	System.out.println("Territory Enter is " + oldTerritory + " and New Territory is : "+ newTerritory);
	if(StringUtils.isNotEmpty(oldTerritory) && StringUtils.isNotEmpty(newTerritory)) {
	    territory.getTerritoryOfContinent().put(newTerritory,territory.getTerritoryOfContinent().remove(oldTerritory));
	    territory.getNeighborTerritories().put(newTerritory, territory.getNeighborTerritories().remove(oldTerritory));

	    for(Entry<String, ArrayList<String>> entry : continent.getContinentTerritories().entrySet()) {
		if(entry.getValue().contains(oldTerritory)) {
		    entry.getValue().remove(oldTerritory);
		    entry.getValue().add(newTerritory);
		}
	    }
	    for(Entry<String, ArrayList<String>> entry : territory.getNeighborTerritories().entrySet()) {
		ArrayList<String> tempArray = new ArrayList<>();
		for(int i=0;i<entry.getValue().size();i++) {
		    if(entry.getValue().get(i).equalsIgnoreCase(oldTerritory)) {
			tempArray.add(newTerritory);
		    } else {
			tempArray.add(entry.getValue().get(i));
		    }   
		}
		entry.setValue(tempArray);
	    }
	    displaySuccessDialog();
	    updateAllContinentList();
	    updAddTerrContinentLst();
	    updEditContinentLst();
	    updAddAdjTerritoryLst();
	    updEditTerritoryLst();
	    updDelContinentLst();	    }
    }
    /**
     * This method is used to delete continent and all it's territory in Delete Section
     * @param continentStr Continent which need to delete
     */
    private void deleteContinent(String continentStr) {
	try {
	    System.out.println("Enter  continent  for delete is "+ continentStr);
	    if(deleteContinentList.getSelectedIndex() != -1) {
		continent.getValueOfContinent().remove(continentStr);
		continent.getContinentTerritories().remove(continentStr);
		Map<String, String> tempMap =territory.getTerritoryOfContinent();
		Set<String> set = new HashSet<> ();
		for(Entry<String, String> entry : tempMap.entrySet()) {
		    if(entry.getValue().equalsIgnoreCase(continentStr)) {
			territory.getNeighborTerritories().remove(entry.getKey());
			set.add(entry.getKey());
		    }
		}
		territory.getTerritoryOfContinent().keySet().removeAll(set);
		displaySuccessDeleteDialog();
		updateAllContinentList();
		updAddTerrContinentLst();
		updEditContinentLst();
		updAddAdjTerritoryLst();
		updEditTerritoryLst();
		updDelContinentLst();

	    }
	}
	catch(Exception e) {
	    System.out.println("Exception ");
	}

    }
    /**
     * This method is used to udpate Continent Name and it's value in Edit Continent Section
     * @param oldContinent Old Continent
     * @param newContinent New Continent 
     * @param value Value of Continent
     */
    private void updateContinent(String oldContinent, String newContinent, String value) {
	System.out.println("Continent Selected is + " + oldContinent + " new one is " + newContinent + " value "+ value);
	if(StringUtils.isNotEmpty(oldContinent) && StringUtils.isNotEmpty(newContinent) && StringUtils.isNotEmpty(value) && StringUtils.isNumeric(value) && Integer.parseInt(value) > 0) {
	    continent.updateContinentValue(oldContinent, newContinent, Integer.parseInt(value));
	    territory.updateTerritoryContinent(oldContinent, newContinent);
	    ArrayList<String> tempArray = continent.getContinentTerritories().get(oldContinent);
	    continent.getContinentTerritories().remove(oldContinent);
	    continent.getContinentTerritories().put(newContinent,tempArray);
	    displaySuccessDialog();
	    updateAllContinentList();
	    updAddTerrContinentLst();
	    updEditContinentLst();
	    updAddAdjTerritoryLst();
	    updEditTerritoryLst();
	    updDelContinentLst();
	} else {
	    displayErrorDialog();
	}

    }
    /**
     * This method is used to add territory  to  particular continent in Add Territory Section Section
     * @param continentStr Continent Name
     * @param territoryStr Territory Name
     */
    private void addTerritory(String continentStr, String territoryStr) {
	System.out.println("Continent selected is " + continentStr + " with Territory " + territoryStr);
	if(StringUtils.isNotEmpty(continentStr) && StringUtils.isNotEmpty(territoryStr) && !territory.getTerritoryOfContinent().containsKey(territoryStr)) {
	    territory.addTerritoryCont(territoryStr, continentStr);
	    territory.addTerritory(territoryStr);
	    continent.addContinentTerritory(continentStr, territoryStr);
	    displaySuccessDialog();
	    addContinentField.setText("");
	    addContinentValField.setText("");
	    addTerritoryField.setText("");
	    updateAllContinentList();
	    updAddTerrContinentLst();
	    updEditContinentLst();
	    updAddAdjTerritoryLst();
	    updEditTerritoryLst();
	    updDelContinentLst();
	} else {
	    displayErrorDialog();
	}
    }
    /**
     * This method is used to add adjacent territory  to  particular territory in Add Adjacent Section
     * @param territoryStr Territory whose adjacent territory you need to Add
     * @param adjacent Adjacent Territory
     */
    private void addAdjTerritory( String territoryStr, String adjacent) {
	System.out.println("Continent is Territory " + territoryStr + " and Adjacent of Terriory is " + adjacent);
	if( StringUtils.isNotEmpty(territoryStr) && StringUtils.isNotEmpty(adjacent) && !territoryStr.equalsIgnoreCase(adjacent)) {
	    if(territory.getNeighborTerritories().containsKey(territoryStr) && !territory.getNeighborTerritories().get(territoryStr).contains(adjacent) && territory.getNeighborTerritories().get(territoryStr).size() < 10 ) {
		territory.addAdjacentTerritory(territoryStr, adjacent);
		territory.addAdjacentTerritory(adjacent, territoryStr);
		displaySuccessDialog();
		updateAllContinentList();
		updEditContinentLst();
		updAddTerrContinentLst();
		updAddAdjTerritoryLst();
		updEditTerritoryLst();
		updDelContinentLst(); 
	    } else if(!territory.getNeighborTerritories().containsKey(territoryStr)){
		territory.addAdjacentTerritory(territoryStr, adjacent);
		territory.addAdjacentTerritory(adjacent, territoryStr);
		displaySuccessDialog();
		updateAllContinentList();
		updEditContinentLst();
		updAddTerrContinentLst();
		updAddAdjTerritoryLst();
		updEditTerritoryLst();
		updDelContinentLst();    
	    } else {
		displayErrorDialog();
	    }
	} else {
	    duplicateErrorDialog();
	}

    }
    /**
     * provide list of territory of particular continent 
     */
    private void updAllTerritoryLst() {
	allTerritoryList.removeAllItems();
	for(Entry<String, String> entry : territory.getTerritoryOfContinent().entrySet()) {
	    if(entry.getValue().equalsIgnoreCase(allContinentList.getItemAt(allContinentList.getSelectedIndex()))) {
		allTerritoryList.addItem(entry.getKey());
	    }
	}
    }
    /**
     * This method is used to add Continent with particular value in Add Continent Section
     * @param continentStr Continent Name
     * @param value Value of Continent
     */
    public void addContinent(String continentStr, String value) {
	System.out.println("Continent Enter is " + continentStr + " with value " + value);
	if(StringUtils.isNotEmpty(continentStr) && StringUtils.isNotEmpty(value) && StringUtils.isNumeric(value) && Integer.parseInt(value) > 0) {
	    if(!continent.getValueOfContinent().containsKey(continentStr)) {
		continent.setContinentValue(continentStr, Integer.parseInt(value));
		displaySuccessDialog();
		addContinentField.setText("");
		addContinentValField.setText("");
		addTerritoryField.setText("");
		updateAllContinentList();
		updAddTerrContinentLst();
		updEditContinentLst();
		updAddAdjTerritoryLst();
		updEditTerritoryLst();
		updDelContinentLst();
	    } else {
		duplicateErrorDialog();
	    }

	} else {
	    displayErrorDialog();
	}
    }
    /**
     * Update all Continent List drop down
     */
    private void updateAllContinentList() {
	allContinentList.removeAllItems();
	for(Entry<String, Integer> entry : continent.getValueOfContinent().entrySet()) {
	    allContinentList.addItem(entry.getKey());
	}
    }
    /**
     * Update territory List drop down of Edit Territory Section
     */
    private void updEditTerritoryLst() {
	editTerritoryList.removeAllItems();
	for(Entry<String,String> entry : territory.getTerritoryOfContinent().entrySet()) {
	    editTerritoryList.addItem(entry.getKey());
	}
    }
    /**
     * Update Continent List drop down of Delete Continent Section
     */
    private void updDelContinentLst() {
	deleteContinentList.removeAllItems();
	for(Entry<String, Integer> entry : continent.getValueOfContinent().entrySet()) {
	    deleteContinentList.addItem(entry.getKey());
	}
    }
    /**
     * Update Continent List drop down of Edit Continent Section
     */
    private void updEditContinentLst() {
	editContinentList.removeAllItems();
	for(Entry<String, Integer> entry : continent.getValueOfContinent().entrySet()) {
	    editContinentList.addItem(entry.getKey());
	}	    
    }
    /**
     * Update Continent List drop down of Add Adjacent Section
     */
    private void updAddTerrContinentLst() {
	addTerrContinentList.removeAllItems();
	for(Entry<String, Integer> entry : continent.getValueOfContinent().entrySet()) {
	    addTerrContinentList.addItem(entry.getKey());
	}	    
    }
    /**
     * Show Pop Up when Content is deleted
     */
    public void displaySuccessDeleteDialog() {
	JOptionPane.showMessageDialog(null, "Content Deleted Successfully", "Content Validated", JOptionPane.INFORMATION_MESSAGE);   
    }
    /**
     * Show Pop Up when Content is added or created
     */
    public void displaySuccessDialog() {
	JOptionPane.showMessageDialog(null, "Content Created Successfully", "Content Validated", JOptionPane.INFORMATION_MESSAGE);   
    }
    /**
     * Show Pop Up when duplicate Content is found
     */
    public void duplicateErrorDialog(){
	JOptionPane.showMessageDialog(null, "Please Enter New Value. Values Already exist", "Content Same", JOptionPane.ERROR_MESSAGE);   
    }
    /**
     * Show Pop Up when content is invalid
     */
    public void displayErrorDialog(){
	JOptionPane.showMessageDialog(null, "Please Check data Again.", "Content Invalid", JOptionPane.ERROR_MESSAGE);   
    }

}
